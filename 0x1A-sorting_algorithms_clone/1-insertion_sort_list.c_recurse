#include "sort.h"
#include <stdbool.h>
/**
 * struct listint_s - Singly linked list node
 *
 * @n: Integer stored in the node
 * @next: Pointer to the next element of the list
 */
typedef struct listint_s
{
	int n;
	struct listint_s *prev;
	struct listint_s *next;
} listint_t;


/**
 * insertion_sort_list - insertion sort
 * @list: linked list of listint_t list
 */
void insertion_sort_list(listint_t **list)
{
  listint_t *query, *tmp_head, *tmp, *min;


	tmp_head = *list; /**@head represents a linked list **/ 
	/*query = (*list)->next;*/

	/**if tmp_head-> == NULL: there is only one element in list**/

	if (tmp_head->next == NULL)
	  return;
	/*find index of the smallest n value */
	min->n = 1;
	for (query->n = 1; query != NULL; query = query->next)
	  if (min->n > query->n)
	    min = query;
        /* move the smallest element to o-th element by swapping*/
	tmp->n = (*list)->n;
	(*list)->n = min->n;
	min->n = tmp->n;
	while ((*list)->prev != NULL)
	    *list = (*list)->prev;
	print_list(*list);

	/*recurse*/
	insertion_sort_list(listint_t **list);
}


/**
 * swap_left - swap the identified nodes
 * @left_node: the node to the left( before) of  node
 * @right_node: the node to be checked, somewhere in sorted list
 * @list: the head representing the linked list
 */
void swap_left(listint_t *left_node, listint_t* right_node)
{
	if (left_node->prev)
	  (left_node->prev)->next =right_node;
	if (right_node->next)
	  (right_node->next)->prev = left_node;
	right_node->prev = left_node->prev;
	left_node->next = right_node->next;
	right_node->next = left_node;
	left_node->prev =right_node;

}
